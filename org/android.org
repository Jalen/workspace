
* Application Fundamentals
** Application Components
*** Activities
	An activity represents a single screen with a user interface.

#+BEGIN_EXAMPLE
an email application might have one activity that shows a list of new emails,
another activity to compose an email, and another activity for reading
emails. Although the activities work together to form a cohesive user experience
in the email application, each one is independent of the others. 
#+END_EXAMPLE
*** Services
	A service is a component that runs in the background to perform long-running
    operations or to perform work for remote processes.

#+BEGIN_EXAMPLE
a service might play music in the background while the user is in a different
application, or it might fetch data over the network without blocking user
interaction with an activity.

#+END_EXAMPLE
*** Content providers
	A content provider manages a shared set of application data.
*** Broadcast receivers
	A broadcast receiver is a component that responds to system-wide broadcast announcements.
*** A unique aspect of the Android system design is that any application can start another application’s component. 
#+BEGIN_EXAMPLE
if you want the user to capture a photo with the device camera, there's probably
another application that does that and your application can use it, instead of
developing an activity to capture a photo yourself. You don't need to
incorporate or even link to the code from the camera application. Instead, you
can simply start the activity in the camera application that captures a
photo. When complete, the photo is even returned to your application so you can
use it. To the user, it seems as if the camera is actually a part of your
application.

#+END_EXAMPLE

** Activating Components
Three of the four component types—activities, services, and broadcast
receivers—are activated by an asynchronous message called an intent. Intents
bind individual components to each other at runtime (you can think of them as
the messengers that request an action from other components), whether the
component belongs to your application or another.

** The Manifest File

   Before the Android system can start an application component, the system must
   know that the component exists by reading the application's
   AndroidManifest.xml file (the "manifest" file). Your application must declare
   all its components in this file, which must be at the root of the application
   project directory.

*** Declaring components
*** Declaring components capabilities

	The way the system identifies the components that can respond to an intent
    is by comparing the intent received to the intent filters provided in the
    manifest file of other applications on the device.

	When you declare a component in your application's manifest, you can
    optionally include intent filters that declare the capabilities of the
    component so it can respond to intents from other applications. You can
    declare an intent filter for your component by adding an <intent-filter>
    element as a child of the component's declaration element.

*** Declaring application requirements
** Application Resources
   
   One of the most important aspects of providing resources separate from your
   source code is the ability for you to provide alternative resources for
   different device configurations


* Activities
  
  back stack
      last in, first out
	  
  activity's lifecycle callback methods
    create
	stop
	resume
	destroy
  state transition
** Creating an Activity
** Implementing a user interface
   
   View
   ViewGroup
   setContentView

** Declaring the activity in the manifest
   
#+BEGIN_EXAMPLE
<manifest ... >
  <application ... >
      <activity android:name=".ExampleActivity" />
      ...
  </application ... >
  ...
</manifest >
#+END_EXAMPLE

** Using intent filter
#+BEGIN_EXAMPLE
<activity android:name=".ExampleActivity" android:icon="@drawable/app_icon">
    <intent-filter>
        <action android:name="android.intent.action.MAIN" />
        <category android:name="android.intent.category.LAUNCHER" />
    </intent-filter>
</activity>
#+END_EXAMPLE

The <action> element specifies that this is the "main" entry point to the
application. The <category> element specifies that this activity should be
listed in the system's application launcher (to allow users to launch this
activity).

** Starting an Activity

#+begin_src java
Intent intent = new Intent(this, SignInActivity.class);
startActivity(intent);
#+end_src

#+begin_src java
Intent intent = new Intent(Intent.ACTION_SEND);
intent.putExtra(Intent.EXTRA_EMAIL, recipientArray);
startActivity(intent);
#+end_src

** Starting an activity for a result

#+begin_src lisp 
private void pickContact() {
    // Create an intent to "pick" a contact, as defined by the content provider URI
    Intent intent = new Intent(Intent.ACTION_PICK, Contacts.CONTENT_URI);
    startActivityForResult(intent, PICK_CONTACT_REQUEST);
}

@Override
protected void onActivityResult(int requestCode, int resultCode, Intent data) {
    // If the request went well (OK) and the request was PICK_CONTACT_REQUEST
    if (resultCode == Activity.RESULT_OK && requestCode == PICK_CONTACT_REQUEST) {
        // Perform a query to the contact's content provider for the contact's name
        Cursor cursor = getContentResolver().query(data.getData(),
        new String[] {Contacts.DISPLAY_NAME}, null, null, null);
        if (cursor.moveToFirst()) { // True if the cursor is not empty
            int columnIndex = cursor.getColumnIndex(Contacts.DISPLAY_NAME);
            String name = cursor.getString(columnIndex);
            // Do something with the selected contact's name...
        }
    }
}
#+end_src

** Shutting Down an Activity
#+begin_src lisp 
finish()

finishActivity()
#+end_src
